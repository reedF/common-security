<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
	http://www.springframework.org/schema/beans/spring-beans.xsd     
	http://www.springframework.org/schema/cache     
	http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- redis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	<!-- setting for jedis-2.1.0
		<property name="maxActive" value="${redis.pool.maxActive?20}" />
		<property name="maxIdle" value="${redis.pool.maxIdle?10}" />
		<property name="maxWait" value="${redis.pool.maxWait?2000}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow?true}" />
		<property name="testOnReturn" value="${redis.pool.testOnReturn?false}" />
	 -->	
	 	<property name="maxTotal" value="${redis.pool.maxActive?20}" />
		<property name="maxIdle" value="${redis.pool.maxIdle?10}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWait?2000}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow?true}" />
		<property name="testOnReturn" value="${redis.pool.testOnReturn?false}" />
	</bean>
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.ip?127.0.0.1}" />
		<!-- <property name="password" value="${redis.pass?nopwd}" /> -->
		<property name="database" value="${redis.default.db?0}" />
		<property name="port" value="${redis.port?6379}" />
		<property name="timeout" value="${redis.timeout?10000}" />
		<property name="usePool" value="true" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>
	<!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory" >
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
<!-- 		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property> -->
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
	</bean>			

	<!-- declare Redis Cache Manager -->
	<bean id="rediscacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"
		c:template-ref="redisTemplate" p:defaultExpiration="${defaultExpiration?1800}" />

	<!-- dummy cacheManager to control if can not find cache how to do-->
	<bean id="cacheManager" class="org.springframework.cache.support.CompositeCacheManager">
		<property name="cacheManagers">
			<list>
				<ref bean="rediscacheManager" />
			</list>
		</property>
		<property name="fallbackToNoOpCache" value="true" />
	</bean>

</beans>